#!/usr/bin/env python3
"""
Script de configura√ß√£o inicial para o Editor de ActionPlan
"""

import os
import json
import shutil
from datetime import datetime
import sys


def check_requirements():
    """Verifica se os arquivos necess√°rios existem"""
    required_files = ['SGQP-Tecomat.norms.json']
    missing_files = []

    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)

    if missing_files:
        print("‚ùå Arquivos necess√°rios n√£o encontrados:")
        for file in missing_files:
            print(f"   - {file}")
        return False

    print("‚úÖ Todos os arquivos necess√°rios encontrados")
    return True


def create_backup():
    """Cria backup inicial"""
    source_file = 'SGQP-Tecomat.norms.json'
    backup_file = f'SGQP-Tecomat.norms.backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'

    try:
        shutil.copy2(source_file, backup_file)
        print(f"‚úÖ Backup criado: {backup_file}")
        return backup_file
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")
        return None


def validate_json():
    """Valida se o JSON est√° correto"""
    try:
        with open('SGQP-Tecomat.norms.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        # Verifica se tem actionPlans
        action_plan_count = 0
        for obj in data:
            requirements = obj.get('requirements', [])
            for req in requirements:
                action_plans = req.get('actionPlan', [])
                action_plan_count += len(action_plans)

        print(f"‚úÖ JSON v√°lido - {action_plan_count} ActionPlans encontrados")
        return True

    except json.JSONDecodeError as e:
        print(f"‚ùå JSON inv√°lido: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao validar JSON: {e}")
        return False


def create_config():
    """Cria arquivo de configura√ß√£o"""
    config = {
        'last_setup': datetime.now().isoformat(),
        'version': '2.0',
        'auto_save': True,
        'backup_interval': 30,
        'max_backups': 5
    }

    try:
        with open('config.json', 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        print("‚úÖ Arquivo de configura√ß√£o criado")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar configura√ß√£o: {e}")
        return False


def show_instructions():
    """Mostra instru√ß√µes de uso"""
    print("\n" + "="*50)
    print("üéâ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("="*50)
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Execute: streamlit run edit_json_streamlit_improved.py")
    print("2. Abra o navegador no endere√ßo mostrado")
    print("3. Use a sidebar para navegar e filtrar")
    print("4. As altera√ß√µes s√£o salvas automaticamente")
    print("\nüí° DICAS:")
    print("- Sempre crie backup antes de grandes edi√ß√µes")
    print("- Use os filtros para trabalhar em grupos")
    print("- Baixe o arquivo final quando concluir")
    print("\nüÜò EM CASO DE PROBLEMAS:")
    print("- Execute: python backup_manager.py")
    print("- Verifique se o arquivo JSON existe")
    print("- Use a fun√ß√£o de restaura√ß√£o se necess√°rio")


def main():
    """Fun√ß√£o principal"""
    print("üîß CONFIGURA√á√ÉO INICIAL - EDITOR ACTIONPLAN")
    print("="*50)

    # Verifica arquivos
    if not check_requirements():
        print("\n‚ùå Configura√ß√£o falhou. Verifique se o arquivo JSON existe.")
        sys.exit(1)

    # Valida JSON
    if not validate_json():
        print("\n‚ùå JSON inv√°lido. Verifique o arquivo.")
        sys.exit(1)

    # Cria backup
    backup_file = create_backup()
    if not backup_file:
        print("\n‚ùå Erro ao criar backup.")
        sys.exit(1)

    # Cria configura√ß√£o
    if not create_config():
        print("\n‚ö†Ô∏è Erro ao criar configura√ß√£o, mas pode continuar.")

    # Mostra instru√ß√µes
    show_instructions()


if __name__ == "__main__":
    main()
